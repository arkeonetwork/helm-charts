---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Chart.Name }}-sts
  namespace: {{ .Release.Name }}
  labels: 
    name: "ipfs"
    nodeType: "cluster"
spec:
  serviceName: {{ .Chart.Name }}-svc
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:   
      name: "ipfs"
      nodeType: "cluster"
  podManagementPolicy: 'Parallel'
  updateStrategy:
    type: 'RollingUpdate'
  template:
    metadata:
      namespace: {{ .Release.Name }}
      labels:
        name: "ipfs"
        nodeType: "cluster"
    spec:
      terminationGracePeriodSeconds: 600
      initContainers:
      - name: "configure-ipfs"
        image: "ipfs/go-ipfs:latest"
        command: 
        - 'sh'
        - '/custom/configure-ipfs.sh'
        volumeMounts:
        - name: "ipfs-storage"
          mountPath: "/data/ipfs"
        - name: "configure-scripts"
          mountPath: "/custom"
      containers: 
      - name: {{ Chart.name }}-ipfs
        image: {{ .Values.image.ipfs }}
        env: 
        {{- range $env := .Values.env.ipfs }}
        - name: {{ $env.name }}
          value: {{ $env.value | quote }}
        {{- end }}
        ports: 
        {{- range $port := .Values.ports.ipfs }}
        - name: {{ $port.name }}
          containerPort: {{ $port.containerPort }}
          protocol: {{ $port.protocol }}
        {{- end }}
        resources:
          limits:
            cpu: {{ .Values.limits.ipfs.cpu }}
            memory: {{ .Values.limits.ipfs.memory }}
        livenessProbe:
          initialDelaySeconds: 5
          periodSeconds: 30
          timeoutSeconds: 10
          tcpSocket:
            port: 'swarm'
        volumeMounts:
        {{- range $mounts := .Values.volumeMounts }}
        - name: {{ $mounts.name }}
          mountPath: {{ $mounts.mountPath }}
        {{-end }}
      - name: {{ Chart.name }}-ipfs-cluster
        image: {{ .Values.image.ipfsCluster }}
        env: 
        {{- range $env := .Values.env.ipfsCluster }}
        - name: {{ $env.name }}
          value: {{ $env.value | quote }}
        {{- end }}
        - name: "CLUSTER_ID"
          valueFrom: 
            configMapKeyRef: 
              name: "ipfs-scripts"
              key: "cluster-id"
        - name: "CLUSTER_PRIVATEKEY"
          valueFrom: 
            secretKeyRef: 
              name: "ipfs-secret"
              key: "cluster-priv-key"
        - name: "CLUSTER_SECRET"
          valueFrom: 
            secretKeyRef: 
              name: "ipfs-secret"
              key: "cluster-secret"
        envFrom:
        - configMapRef:
            name: {{ .Chart.Name }}-scripts
        {{- with .Values.ports.ipfsCluster }}
        ports: 
          {{- toYaml . | nindent 10 }}
        {{- end }}
        resources:
          limits:
            cpu: {{ .Values.limits.ipfs.cpu }}
            memory: {{ .Values.limits.ipfs.memory }}   
        command: 
        - 'sh'
        - '/custom/entrypoint.sh' 
        livenessProbe:
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 10
          tcpSocket:
            port: 'cluster-swarm'
        volumeMounts:
        {{- range $mounts := .Values.volumeMounts }}
        - name: {{ $mounts.name }}
          mountPath: {{ $mounts.mountPath }}
        {{-end }}
      volumes:
        - name: 'configure-script'
          configMap:
            name: {{ .Chart.Name }}-scripts
            defaultMode: 0775
  volumeClaimTemplates:
  - metadata:
      name: 'cluster-storage'
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ $.Values.global.storageClassName }}
      resources:
        requests:
          storage: 5Gi
  - metadata:
      name: 'ipfs-storage'
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ $.Values.global.storageClassName }}
      resources:
        requests:
          storage: 200Gi